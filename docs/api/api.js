YUI.add("yuidoc-meta", function(Y) {
   Y.YUIDoc = { meta: {
    "classes": [
        "AggregateCollection",
        "Application",
        "Authentication",
        "Authorization",
        "Base64",
        "BelongsTo",
        "CapitalMarketsActivity",
        "CapitalMarketsActivityActivities",
        "CapitalMarketsActivityAll",
        "CapitalMarketsActivityCount",
        "CapitalMarketsActivityCountExactMatch",
        "CapitalMarketsActivityExactMatch",
        "CapitalMarketsContact",
        "CapitalMarketsContactAll",
        "CapitalMarketsContactContacts",
        "CapitalMarketsContactCount",
        "CapitalMarketsContactCountExactMatch",
        "CapitalMarketsContactExactMatch",
        "CapitalMarketsContentService",
        "CapitalMarketsContentServiceAll",
        "CapitalMarketsContentServiceContentServices",
        "CapitalMarketsContentServiceCount",
        "CapitalMarketsContentServiceCountExactMatch",
        "CapitalMarketsContentServiceExactMatch",
        "CapitalMarketsLogin",
        "CapitalMarketsLoginAll",
        "CapitalMarketsLoginCount",
        "CapitalMarketsLoginCountExactMatch",
        "CapitalMarketsLoginExactMatch",
        "CapitalMarketsOrder",
        "CapitalMarketsOrderAll",
        "CapitalMarketsOrderCount",
        "CapitalMarketsOrderCountExactMatch",
        "CapitalMarketsOrderExactMatch",
        "CapitalMarketsRevenue",
        "CapitalMarketsRevenueAll",
        "CapitalMarketsRevenueCount",
        "CapitalMarketsRevenueCountExactMatch",
        "CapitalMarketsRevenueExactMatch",
        "CapitalMarketsRevenueRevenues",
        "CapitalMarketsTrading",
        "Class",
        "Collection",
        "Collections",
        "Cookie",
        "CorporatePayments",
        "CorporatePaymentsAccount",
        "CorporatePaymentsAccountAll",
        "CorporatePaymentsAccountCount",
        "CorporatePaymentsAccountCountExactMatch",
        "CorporatePaymentsAccountExactMatch",
        "CorporatePaymentsBeneficiary",
        "CorporatePaymentsBeneficiaryAll",
        "CorporatePaymentsBeneficiaryCount",
        "CorporatePaymentsBeneficiaryCountExactMatch",
        "CorporatePaymentsBeneficiaryExactMatch",
        "CorporatePaymentsCrossBorderFxBooking",
        "CorporatePaymentsCrossBorderFxBookingAll",
        "CorporatePaymentsCrossBorderFxBookingCount",
        "CorporatePaymentsCrossBorderFxBookingCountExactMatch",
        "CorporatePaymentsCrossBorderFxBookingExactMatch",
        "CorporatePaymentsCrossBorderFxPayment",
        "CorporatePaymentsCrossBorderFxPaymentAll",
        "CorporatePaymentsCrossBorderFxPaymentCount",
        "CorporatePaymentsCrossBorderFxPaymentCountExactMatch",
        "CorporatePaymentsCrossBorderFxPaymentExactMatch",
        "CorporatePaymentsCrossBorderFxPaymentFxPayments",
        "CorporatePaymentsCrossBorderFxQuote",
        "CorporatePaymentsCrossBorderFxQuoteAll",
        "CorporatePaymentsCrossBorderFxQuoteCount",
        "CorporatePaymentsCrossBorderFxQuoteCountExactMatch",
        "CorporatePaymentsCrossBorderFxQuoteExactMatch",
        "CorporatePaymentsLogin",
        "CorporatePaymentsLoginAll",
        "CorporatePaymentsLoginCount",
        "CorporatePaymentsLoginCountExactMatch",
        "CorporatePaymentsLoginExactMatch",
        "CorporatePaymentsPayment",
        "CorporatePaymentsPaymentAll",
        "CorporatePaymentsPaymentCount",
        "CorporatePaymentsPaymentCountExactMatch",
        "CorporatePaymentsPaymentExactMatch",
        "DefaultAdapter",
        "Dispatcher",
        "HasMany",
        "HasOne",
        "HttpAdapter",
        "JSON",
        "LargeLocalStorage",
        "MockServer",
        "Model",
        "Models",
        "Relationship",
        "RetailBanking",
        "RetailBankingAccount",
        "RetailBankingAccountAll",
        "RetailBankingAccountBalance",
        "RetailBankingAccountBalanceAll",
        "RetailBankingAccountBalanceCount",
        "RetailBankingAccountBalanceCountExactMatch",
        "RetailBankingAccountBalanceExactMatch",
        "RetailBankingAccountCount",
        "RetailBankingAccountCountExactMatch",
        "RetailBankingAccountExactMatch",
        "RetailBankingAccountFundTransfer",
        "RetailBankingAccountFundTransferAll",
        "RetailBankingAccountFundTransferCount",
        "RetailBankingAccountFundTransferCountExactMatch",
        "RetailBankingAccountFundTransferExactMatch",
        "RetailBankingAccountTransaction",
        "RetailBankingAccountTransactionAll",
        "RetailBankingAccountTransactionCount",
        "RetailBankingAccountTransactionCountExactMatch",
        "RetailBankingAccountTransactionExactMatch",
        "RetailBankingForeignCurrency",
        "RetailBankingForeignCurrencyAll",
        "RetailBankingForeignCurrencyCount",
        "RetailBankingForeignCurrencyCountExactMatch",
        "RetailBankingForeignCurrencyExactMatch",
        "RetailBankingForeignCurrencyForeignCurrency",
        "RetailBankingLocation",
        "RetailBankingLocationAll",
        "RetailBankingLocationCount",
        "RetailBankingLocationCountExactMatch",
        "RetailBankingLocationExactMatch",
        "RetailBankingLocationLocations",
        "RetailBankingLogin",
        "RetailBankingLoginAll",
        "RetailBankingLoginCount",
        "RetailBankingLoginCountExactMatch",
        "RetailBankingLoginExactMatch",
        "RetailBankingPayee",
        "RetailBankingPayeeAll",
        "RetailBankingPayeeCount",
        "RetailBankingPayeeCountExactMatch",
        "RetailBankingPayeeExactMatch",
        "RetailBankingPayeeType",
        "RetailBankingPayeeTypeAll",
        "RetailBankingPayeeTypeCount",
        "RetailBankingPayeeTypeCountExactMatch",
        "RetailBankingPayeeTypeExactMatch",
        "ScopeCollection",
        "Url",
        "Validator",
        "XML"
    ],
    "modules": [
        "AP",
        "CitiMobileChallengeSdk",
        "MockServer",
        "adapter",
        "adapters",
        "auth",
        "collection",
        "collections",
        "model",
        "models",
        "relationship",
        "utility"
    ],
    "allModules": [
        {
            "displayName": "adapter",
            "name": "adapter",
            "description": "Data adapter for objects whose datasource is a standard AP API"
        },
        {
            "displayName": "adapters",
            "name": "adapters",
            "description": "CapitalMarketsTrading adapter for application `CitiMobileChallengeSdk`."
        },
        {
            "displayName": "AP",
            "name": "AP",
            "description": "Provides the global namespace for SDK framework classes.  Provides convenience\nmethods for app management."
        },
        {
            "displayName": "auth",
            "name": "auth",
            "description": "Provides methods for user authentication and deauthentication.\n\nTo login:"
        },
        {
            "displayName": "CitiMobileChallengeSdk",
            "name": "CitiMobileChallengeSdk"
        },
        {
            "displayName": "collection",
            "name": "collection",
            "description": "Unlike a normal `AP.collection.Collection`, aggregate collections expect a\nsimple integer-only response from the server.  Aggregate collections are always\nzero-length (they have no members).  They have an extra member `value`."
        },
        {
            "displayName": "collections",
            "name": "collections",
            "description": "CapitalMarketsActivityActivitiesis a scope collection for application `CitiMobileChallengeSdk`.  See\n`AP.collection.ScopeCollection` for more information about scopes."
        },
        {
            "displayName": "MockServer",
            "name": "MockServer",
            "description": "Mock server instances are used by the test framework to intercept XHR requests\nand simulate the functionality of an API backend, entirely offline.  A mock\nserver handles all requests matching collections within the application within\nwhich it is instantiated.\n\nTo enable a mock server in an application, simply enable the global\n`useMockServer` flag:"
        },
        {
            "displayName": "model",
            "name": "model",
            "description": "Base model class.  In addition to the standard methods provided by the\n[BackboneJS model class](http://backbonejs.org/#Model), this base model\nimplements full validations support.\n\nThis model should be subclassed, not used directly.  For example:"
        },
        {
            "displayName": "models",
            "name": "models",
            "description": "CapitalMarketsActivity model for application `CitiMobileChallengeSdk`.  See\n`AP.model.Model` for more information about models."
        },
        {
            "displayName": "relationship",
            "name": "relationship",
            "description": "A belongs-to relationship is one where the owner model instance is related to\nno more than one other model instance.  In this scheme, the relationship\ninformation is stored in a foreign key on the owner model.  The related instance\nis stored in a generated field {@link #name} once fetched.\n\nFor example, if the foreign key is `user_id` and the relationship name is `user`\nthen the related instance may be obtained by calling:"
        },
        {
            "displayName": "utility",
            "name": "utility",
            "description": "Utility singleton for encoding and decoding Base64 strings."
        }
    ]
} };
});